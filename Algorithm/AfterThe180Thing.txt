//This doesn't do price handling yet, it's sorting what goes where when moving stuff over to servers.

So there are X transactions left in region R(1) (for example). Other two regions = R(2), R(3)  1 = NA, 2 = EU and 3 = AP in array
You change whether you're using R(1), R(2), R(3)
S(i) = A server in an R


profitTrans = profit per transaction
numTrans = transactions already in place, does not include X
proportionNumTrans = proportion not dropped due to numbah of transactions
proportionSwitch = proportion not dropped due to switchin teh servahs
serverCost = cost for server
numServers = numbah of serverz

i = 1	

if (R(2).S(i).numTrans + X < 180){						//checks the first server in the second region (EU) and checks if we can add the transitions
														//without exceeding 180
	R(2).S(i).numTrans = R(2).S(i).numTrans + X;		//if we aren't going to exceed 180, then add the transactions to the server
	X = 0;
	BREAK OUT OF LOOP
}
else {													//if we are going to exceed 180, then:

	if (i != R(2).numServers){							//make sure we are not on the last server of the region
			
		for (j = i+1, j <= R(2).numServers, j++)		//start at the second server
	{

		if (R(2).S(j).numTrans + X < 180) then{			//check if we can add transactions to that server without exceeding 180
			S(j).t = S(j).t + X;						//if we can then add them
			X = 0;
			BREAK OUT OF LOOP
		}
		
		}
			
	}else{
	
		for (i, i<=R(2).numServers, i++){		//starting at the first server, we attempt to put a few more transactions into each server, up to 200
	
			L = (R(2).S(i).numTrans + X - 200)  //how many transfers left over
			R(2).S(i).numTrans = R(2)S(i).numTrans + X - L
			X = L
		
			if (X = 0) then{
				BREAK OUT OF LOOP
			}
		
		}
	}
	// A variable needs to be added to calculate how many transfers were moved from R(1) TO R(2) for price comparison
	
	if (X != 0){
	
		i = 1	

		if (R(3).S(i).numTrans + X < 180){
		
			R(3).S(i).numTrans = R(2).S(i).numTrans + X;		//goes to the next region and repeats
			X = 0;
			break;
		}
		else {

			if (i != R(3).numServers){
				
				for (j = i+1, j <=R(3).numServers, j++)
			{
	
				if (R(3).S(j).numTrans + X < 180) then{
					S(j).t = S(j).t + X;
					X = 0;
					break;
				}
		
			
			}
			// A variable needs to be added to calculate how many transfers were moved from R(1) TO R(3) for price comparison
	
			if (X != 0){
					//Then there is no room to distrubute accors regions, so a new server must be made regardless
			}
		}

	}
}



//Then we do price comparison, checking to see if it would be more profitable to distribute in this way or to make a server.


